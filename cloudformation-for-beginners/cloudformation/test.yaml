AWSTemplateFormatVersion: "2010-09-09"
Description: vpc

Resources:
  vpctest:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "172.10.0.0/16"
      Tags:
        - Key: Name
          Value: VPC

  sub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpctest
      CidrBlock: 172.10.0.0/27
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: sub-pub-a

  sub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpctest
      CidrBlock: 172.10.0.32/27
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: sub-pub-b

  sub3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpctest
      CidrBlock: 172.10.1.0/26
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: sub-priv-a

  sub4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpctest
      CidrBlock: 172.10.1.64/26
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: sub-priv-b

  sub5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpctest
      CidrBlock: 172.10.2.0/26
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: sub-priv-rds-a

  sub6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpctest
      CidrBlock: 172.10.2.64/26
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: sub-priv-rds-b

  vpcigw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: testigw

  vpceip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  vpcnat:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt vpceip.AllocationId
      SubnetId: !Ref sub1

  vpcattachigw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpctest
      InternetGatewayId: !Ref vpcigw

  vptrtpub:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpctest

  vpcrtpriv:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpctest

  rtasosisationpub1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref vptrtpub
      SubnetId: !Ref sub1

  rtasosisationpub2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref vptrtpub
      SubnetId: !Ref sub2

  rtasosisationpriv1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref vpcrtpriv
      SubnetId: !Ref sub3

  rtasosisationpriv2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref vpcrtpriv
      SubnetId: !Ref sub4

  rtasosisationpriv3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref vpcrtpriv
      SubnetId: !Ref sub5

  rtasosisationpriv4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref vpcrtpriv
      SubnetId: !Ref sub6

  routepub:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref vptrtpub
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref vpcigw

  routepriv:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref vpcrtpriv
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref vpcnat

  Sgbastionhost:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for bastion host"
      GroupName: "sgbastionhost"
      VpcId: !Ref vpctest
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  Sglb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for lb"
      GroupName: "sglb"
      VpcId: !Ref vpctest
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  Sgapp1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for app1"
      GroupName: "sgapp1"
      VpcId: !Ref vpctest
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1717
          ToPort: 1717
          SourceSecurityGroupId: !Ref Sglb

  Sgrds:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for rds"
      GroupName: "sgrds"
      VpcId: !Ref vpctest
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref Sgapp1

  bastionhost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0953476d60561c955
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: "True"
          SubnetId: !Ref sub1
          DeleteOnTermination: "True"
          DeviceIndex: 0
          GroupSet: 
            - !Ref Sgbastionhost

  subnetrds:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS instance"
      DBSubnetGroupName: "subnetrds"
      SubnetIds:
        - !Ref sub5
        - !Ref sub6

  rds:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: "mysql"
      DBInstanceIdentifier: "DB-my-sql"
      DBInstanceClass: "db.t3micro"
      MasterUsername: "admin"
      MasterUserPassword: "feriadiadmin"
      MaxAllocatedStorage: 20
      StorageType: "gp2"
      VPCSecurityGroups: [!Ref Sgrds]
      PubliclyAccessible: "false"
      DBSubnetGroupName: !Ref subnetrds